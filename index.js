const { Telegraf } = require("telegraf");
const NodeGeocoder = require("node-geocoder");
const fs = require('fs');
require('dotenv').config();
const { BOT_TOKEN } = process.env; 
const bot = new Telegraf(BOT_TOKEN);
const axios = require('axios');

const geocoder = NodeGeocoder({
  provider: "openstreetmap",
  language: "uk",
});

const userStorage = {};

let userFirstName = '';
let userLastName = '';
let userUsername = '';

function getLastTreeId() {
  const dataFile = 'tree_data.js';

  if (fs.existsSync(dataFile)) {
    const fileContents = fs.readFileSync(dataFile, 'utf-8');
    const data = JSON.parse(fileContents);

    if (data.length > 0) {
      return data[data.length - 1].TreeID;
    }
  }

  return 0;
}

const userStates = {};
const treeStatesDescriptions = {
  'üü¢ –ó–¥–æ—Ä–æ–≤–µ': '–ö–æ—Ä–∞ –¥–µ—Ä–µ–≤–∞ –º–∞—î –ø—Ä–∏—Ä–æ–¥–Ω–∏–π –∫–æ–ª—ñ—Ä —ñ —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è —Å–≤–æ–≥–æ –≤–∏–¥—É. –õ–∏—Å—Ç—è –∞–±–æ —Ö–≤–æ—è —è—Å–∫—Ä–∞–≤–æ –∑–µ–ª–µ–Ω—ñ —Ç–∞ –∑–¥–æ—Ä–æ–≤—ñ, –±–µ–∑ –æ–∑–Ω–∞–∫ –ø–æ–∂–æ–≤–∫–ª–æ—Å—Ç—ñ. –ì—ñ–ª–∫–∏ —Ç–∞ –≥—ñ–ª–æ—á–∫–∏ –¥–µ—Ä–µ–≤–∞ –º—ñ—Ü–Ω—ñ, –±–µ–∑ —Ç—Ä—ñ—â–∏–Ω –∞–±–æ –æ–∑–Ω–∞–∫ –∑–∞–≥—Ä–æ–∑–∏ –ª–∞–º–∫–∏.',
  'üü† –ü–æ—à–∫–æ–¥–∂–µ–Ω–µ': '–ú–æ–∂–ª–∏–≤—ñ –æ–∑–Ω–∞–∫–∏ –º–µ—Ö–∞–Ω—ñ—á–Ω–∏—Ö –ø–æ—à–∫–æ–¥–∂–µ–Ω—å, —Ç–∞–∫—ñ —è–∫ –ø–æ–¥—Ä—è–ø–∏–Ω–∏, —Ä–æ–∑—Ä–∏–≤–∏ –∫–æ—Ä–∏, –¥—ñ—Ä–∫–∏ –∞–±–æ –∑–ª–∞–º–∞–Ω—ñ –≥—ñ–ª–∫–∏. –õ–∏—Å—Ç—è –∞–±–æ —Ö–≤–æ—è –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ–¥—Ä—è–ø–∞–Ω—ñ, –∑—ñ—Ä–≤–∞–Ω—ñ –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ –≤—ñ—Ç—Ä–æ–º –∞–±–æ —ñ–Ω—à–∏–º–∏ —Ñ—ñ–∑–∏—á–Ω–∏–º–∏ —á–∏–Ω–Ω–∏–∫–∞–º–∏. –î–µ—Ä–µ–≤–æ –º–æ–∂–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –æ–∑–Ω–∞–∫–∏ –∑–∞–≥—Ä–æ–∑–∏ —ñ–Ω—Ñ–µ–∫—Ü—ñ—è–º–∏ —á–∏ —Ö–≤–æ—Ä–æ–±–∞–º–∏.',
  'üî¥ –•–≤–æ—Ä–µ': '–õ–∏—Å—Ç—è –∞–±–æ —Ö–≤–æ—è –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞—Å–æ—Ö–ª—ñ, –∑—ñ—Ä–≤–∞–Ω—ñ –∞–±–æ –ø–æ–∂–æ–≤–∫–ª—ñ, —ñ–Ω–∫–æ–ª–∏ –∑ —á–æ—Ä–Ω–∏–º–∏ —á–∏ –∫–æ—Ä–∏—á–Ω–µ–≤–∏–º–∏ –ø–ª—è–º–∞–º–∏. –ú–æ–∂–ª–∏–≤—ñ –æ–∑–Ω–∞–∫–∏ –≥–Ω–∏—Ç—Ç—è –∞–±–æ –∑–∞–≥–∏–±–µ–ª—ñ –¥–µ—è–∫–∏—Ö –≥—ñ–ª–æ–∫, —â–æ –≤–∏–∫–ª–∏–∫–∞–Ω—ñ —Ö–≤–æ—Ä–æ–±–∞–º–∏ –∞–±–æ –ø–∞—Ä–∞–∑–∏—Ç–∞–º–∏.',
  '‚ö™ –ú–æ–ª–æ–¥–µ': '–î–µ—Ä–µ–≤–æ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–µ –∑–∞ –¥–æ—Ä–æ—Å–ª—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏ —Å–≤–æ–≥–æ –≤–∏–¥—É. –õ–∏—Å—Ç—è –∞–±–æ —Ö–≤–æ—è –º–æ–∂–µ –º–∞—Ç–∏ —è—Å–∫—Ä–∞–≤–∏–π –∑–µ–ª–µ–Ω–∏–π –∫–æ–ª—ñ—Ä, —Å–≤—ñ–∂–∏–π –≤–∏–≥–ª—è–¥ —Ç–∞ –Ω–µ–≤–µ–ª–∏–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—ñ–ª–æ–∫. –°—Ç–æ–≤–±—É—Ä –º–æ–∂–µ –±—É—Ç–∏ —Ç–æ–Ω–∫–∏–º —ñ –≥–ª–∞–¥–∫–∏–º, –±–µ–∑ –≤–∏–¥–∏–º–∏—Ö —Å–ª—ñ–¥—ñ–≤ —Å—Ç–∞—Ä—ñ–Ω–Ω—è –∞–±–æ –≤–µ–ª–∏–∫–æ—ó –∫–æ—Ä–∏.',
};

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
bot.start(ctx => {
  const userId = ctx.message.from.id;
  userStates[userId] = {
    hasSentLocation: false,
    location: null,
  };
  userFirstName = ctx.message.from.first_name;
  userLastName = ctx.message.from.last_name || "";
  userUsername = ctx.message.from.username || "";

  console.log(`–Ü–º'—è: ${userFirstName}`);
  console.log(`–ü—Ä—ñ–∑–≤–∏—â–µ: ${userLastName}`);
  console.log(`–ù—ñ–∫–Ω–µ–π–º: ${userUsername}`);

  ctx.replyWithHTML(`–í—ñ—Ç–∞—î–º–æ —É —Å–∏—Å—Ç–µ–º—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—ó –∑–µ–ª–µ–Ω–∏—Ö –Ω–∞—Å–∞–¥–∂–µ–Ω—å —É –º—ñ—Å—Ç—ñ –ó–∞–ø–æ—Ä—ñ–∂–∂—è! üå≥üåº –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:`, {
    reply_markup: {
      keyboard: [
        [{ text: '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é üåç', request_location: true }],
      ],
      one_time_keyboard: true,
    },
  });
});

// –û–±—Ä–æ–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
bot.on('location', async (ctx) => {
  const userId = ctx.message.from.id;

  if (!userStates[userId].hasSentLocation) {
    userStates[userId].hasSentLocation = true;
    const latitude = ctx.message.location.latitude;
    const longitude = ctx.message.location.longitude;
    try {
      const location = await geocoder.reverse({ lat: latitude, lon: longitude });
      const address = location[0].formattedAddress;
      userStates[userId].longitude = longitude;
      userStates[userId].latitude = latitude;
      userStates[userId].location = address;

      console.log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é: –®–∏—Ä–æ—Ç–∞ ${latitude}, –î–æ–≤–≥–æ—Ç–∞ ${longitude}`);
      console.log(`–ú—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è: ${address}`);

      ctx.reply(`–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é! 
      –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: ${address}`);

      ctx.reply("–¢–µ–ø–µ—Ä –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ:", {
        reply_markup: {
          keyboard: [
            [{ text: '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ üì∑', request_photo: true }]
          ],
          one_time_keyboard: true,
        },
      });
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è: ${error.message}`);
      ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ—ó –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó.');
    }
  } else {
    ctx.reply('–í–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ:');
  }
});

// –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
bot.on('photo', async (ctx) => {
  const userId = ctx.message.from.id;
  const photoId = ctx.message.photo[0].file_id;

  userStorage[userId] = {
    photoId: photoId,
    treeName: null,
    treeState: null,
    treeId: null,
  };

  // –û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –¥–µ—Ä–µ–≤–∞
  ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –Ω–∞–∑–≤—É –¥–µ—Ä–µ–≤–∞üå≥ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —ó—ó:", {
    reply_markup: {
      keyboard: [
        [{ text: '–î—É–±' }, { text: '–Ü–≤–∞' }],
        [{ text: '–¢–æ–ø–æ–ª—è' }, { text: '–Ø–ª–∏–Ω–∫–∞' }],
        [{ text: '–õ–∏–ø–∞' }, { text: '–ö–∞—à—Ç–∞–Ω' }],
        [{ text: '–°–æ—Å–Ω–∞' }, { text: '–ë–µ—Ä–µ–∑–∞' }]
      ],
      one_time_keyboard: true,
    },
  });
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
bot.on('text', async (ctx) => {
  const userId = ctx.message.from.id;
  const user = userStorage[userId];

  if (user) {
    if (!user.treeName) {
      user.treeName = ctx.message.text;

      let statesDescriptionText = '\n';
      for (const state in treeStatesDescriptions) {
        statesDescriptionText += `\n<b>${state}:</b> ${treeStatesDescriptions[state]}\n`;
      }

      ctx.replyWithHTML(statesDescriptionText);

      ctx.reply("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω –¥–µ—Ä–µ–≤–∞, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ–ø–∏—Å—É.üåø", {
        reply_markup: {
          keyboard: [
            [{ text: '–ó–¥–æ—Ä–æ–≤–µ' }, { text: '–•–≤–æ—Ä–µ' }],
            [{ text: '–ü–æ—à–∫–æ–¥–∂–µ–Ω–µ' }, { text: '–ú–æ–ª–æ–¥–µ' }],
          ],
          one_time_keyboard: true,
        },
      });
    } else if (!user.treeState) {
      user.treeState = ctx.message.text;

      const photoLink = `photos/${userId}_${Date.now()}.jpg`;
      const treeId = getLastTreeId() + 1;
      const latitude = userStates[userId].latitude;
      const longitude = userStates[userId].longitude;
      const treeName = user.treeName;
      const treeState = user.treeState;
      const location = userStates[userId].location;

      console.log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ —Ñ–æ—Ç–æ –∑ –æ–±—Ä–∞–Ω–æ—é –Ω–∞–∑–≤–æ—é –¥–µ—Ä–µ–≤–∞: ${treeName}, —Å—Ç–∞–Ω: ${treeState}, ID: ${treeId}`);
      console.log(`–ú—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è: ${location}`);

      try {
        const photoLink = await bot.telegram.getFileLink(user.photoId);
        const photoStream = (await axios.get(photoLink, { responseType: 'stream' })).data;

        await axios.postForm('http://127.0.0.1:3000/trees', {
          photo: photoStream,
          tree: JSON.stringify({
            "UserID": userId,
            "First_Name": userFirstName,
            "Last_Name": userLastName,
            "Username": userUsername,
            "Tree_Name": user.treeName,
            "Tree_State": user.treeState,
            "TreeID": treeId,
            "PhotoLink": photoLink,
            "Location": location,
            "Latitude": latitude,
            "Longitude": longitude,
          }),
        });

        console.log('–î–∞–Ω—ñ –±—É–ª–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
        ctx.reply(`–î—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é üíö`);
      } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ${error.message}`);
        ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      }

      delete userStorage[userId];
    }
  }
});

bot.launch();
